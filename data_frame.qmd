# データフレーム

次章以降、当面の間は[Gapminder](https://www.gapminder.org/)のデータを扱います。データの読み込み方はややこしいので後ほど扱うとして、今回は**パッケージ**を使ってデータを読み込みます。

パッケージとは、スマートフォンにおけるアプリのようなもので、様々な追加機能を含んでいるものです。これらをインストールし、読み込むことでR/Pythonでの分析の幅が格段に広がります。世界中でパッケージが開発され、無料で公開されており、この拡張性がR/Pythonの強みと言って差し支えないでしょう。

また、データ分析において最もポピュラーな形式であるデータフレームについても解説します。

## パッケージのインストール

スマホのアプリと同様にパッケージは最初に（そして一回だけ）インストールする必要があります。今回は`gapminder`という名前のパッケージをインストールします。

### R

Rでは`install.packages("...")`という関数を実行するとパッケージをインストールできます。ただ、RStudio (posit Studio) を使っている場合は、（初期設定では）画面右下の`Packages`タブの`Install`ボタンをクリックしてインストールするのが楽でしょう。

```{r filename="R"}
#| eval: false

install.packages("gapminder")
```

### Python

Pythonの場合は用いているパッケージマネジャーによって方法が異なります。例えば、Google Colaboratoryの場合は`pip`を使って管理をしています。`pip install ...`コマンドでインストールできます。

```{bash filename="python"}
#| eval: false

!pip install gapminder
```

- 文頭に`!`をつけることを忘れないでください。これは、Pythonコードではなくbashコマンドとして実行する目印です。
- Anacondaなどを利用している場合は`conda`を使います。

## パッケージの読み込み

パッケージのインストールは最初の一度で十分ですが、利用する度に読み込む必要があります。もし読み込みができない場合はパッケージのインストールに失敗している可能性が高いです。

Rでは`library(...)`関数を用いて、パッケージを読み込みます。

```{r filename="R"}
library(gapminder)
```

Pythonでは`import ...`コマンドを用いて、パッケージを読み込みます。

```{python filename="Python"}
import gapminder
```

## パッケージの使用

さて、これでGapminderのデータを読み込むことができました。データの中身を確認してみましょう。

Rではパッケージ`gapminder`を読み込んだ際に、オブジェクト`gapminder`を呼び出しています。

```{r filename="R"}
gapminder
```

Pythonではパッケージ`gapminder`の中にオブジェクト`gapminder`が入っています。

```{python filename="Python"}
gapminder.gapminder
```

- Pythonではパッケージ名のあとに`.`をつけて、パッケージ内のデータや関数にアクセスします。分かりにくいですが、`gapminder.gapminder`というのは「`gapminder`というパッケージの中の`gapminder`というデータ」という意味です。

## データフレーム

これらのオブジェクトを**データフレーム**と呼びます。データフレームは横（行）が観察 (observation) で、縦（列）が変数 (variable) になります。

![データフレームのイメージ](figures/tabular.drawio.png)

- しばしば、表形式 (tabular) データ、構造化データ、関係データなどとも呼びます。

Gapminderのデータで言えば、観察はある年のある国で、変数は国名、大陸名、年、平均寿命、人口、一人あたりGDPとなっています。このような形式のデータは社会科学のデータ分析で標準的なものであり、当面の間はデータフレームの分析を扱います。

なお、データフレームの全体を表示するのは冗長なので、冒頭だけを表示させることができます。

```{r filename="R"}
head(gapminder)
```

```{python filename="Python"}
gapminder.gapminder.head()
```

## それで？

残念ながらデータそれ自体からなにかしらの知見を得ることは難しいです。というか、データを眺めただけで何かが分かるのであれば、わざわざデータ分析をする必要はないように思えます。

ここからは、データを数値で表現したり（要約）、グラフを作ったり（可視化）することで特徴を把握する作業を学びたいと思います。
