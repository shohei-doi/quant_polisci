[
["index.html", "Rで計量政治学入門 はじめに", " Rで計量政治学入門 土井 翔平 2020-04-18 はじめに 本書はRによる計量政治学の入門レベルの講義資料です。 質問や間違いなどがありましたら、ご連絡を下さい。 筆者のプロフィールはこちらをご覧ください。 RやRStudioのインストールについてはRの環境構築を、基本操作についてはRプログラミング入門をご覧ください。 "],
["data-import.html", "第1章 データの読み込み 1.1 使用するパッケージ", " 第1章 データの読み込み 本章ではデータを読み込む方法について解説します。 1.1 使用するパッケージ library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.3 ## ✓ tibble 3.0.0 ✓ dplyr 0.8.5 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() "],
["install-r.html", "補論A Rの環境構築", " 補論A Rの環境構築 "],
["intro-r.html", "補論B Rプログラミング入門 B.1 関数 B.2 オブジェクト B.3 パッケージ B.4 Rスクリプト B.5 Rプロジェクト B.6 関数の作成 B.7 ループ B.8 条件分岐 B.9 練習問題：フィボナッチ数列 B.10 練習問題：モンテカルロ・シミュレーション", " 補論B Rプログラミング入門 B.1 関数 関数 (function) とは何かを入力すると、何かを出力するものです。 例えば、 print(&quot;Hello, World.&quot;) ## [1] &quot;Hello, World.&quot; というコードは、&quot;Hello, World.&quot;という文字列をprint()という関数に入力し、その文字列を出力しています。 Rでは、関数は関数名()という形を取ります。 入力するものを入力引数 (input argument) 、出力するものを出力引数 (output argument) と呼んだりします。 次のように、入力引数も出力引数も1つとは限りません。 rnorm(n = 10, mean = 0, sd = 1) ## [1] 0.8029723 -0.9328444 0.7340415 0.5110543 -0.4738285 -0.9290784 ## [7] -0.8557367 0.5963760 1.1240483 0.7359124 さて、この関数は何をしているのでしょうか。 Rでは、関数名の前に?をつけて実行することで、その関数のヘルプを見ることができます。 ?rnorm 英語で関数の使い方が解説されていますが、rnorm(n = 10, mean = 0, sd = 1)は平均0、標準偏差1の（標準）正規分布に従う乱数を10個だけ生じさせています。 入力引数は=で明示的に指定する場合、どのような順番でも構いません。 rnorm(mean = 0, sd = 1, n = 10) 入力引数を明示的に指定しない場合、ヘルプにある順番で入力します。 以下の例は上述のものと同じです。 rnorm(10, 0, 1) また、ヘルプでmean = 0, sd = 1のように書かれている場合、デフォルトが定められています。 実行者が入力引数を指定しない限り、デフォルト値が使用されます。 したがって、以下の例もこれまでと同じコードです。 ｘ rnorm(10) B.2 オブジェクト Rでは&lt;-でオブジェクトを作成することができます。 例えば、100個の正規分布に従う乱数をxという名前のオブジェクトとして作成します。 x &lt;- rnorm(100) RStudioでは&lt;-はショートカットAlt + -で入力できます。 x ## [1] -0.94969661 -0.89104844 -0.02678947 0.09598613 1.57955585 -1.27511636 ## [7] 1.07460540 0.07634585 -1.25088968 -0.37000442 -0.36936231 0.54447624 ## [13] -0.53341289 -1.67463860 -0.71002589 1.07533371 1.17582650 -0.30642484 ## [19] 0.11584662 0.03700420 0.15870602 -0.06779498 0.76583811 1.25847097 ## [25] 1.69751904 0.20877803 -1.77532016 0.08787316 0.32909828 -2.43162184 ## [31] 0.91150592 0.49969908 1.81209470 0.68203624 -1.26718303 0.45087470 ## [37] -1.27300544 0.79326948 -0.74859889 -1.63630740 1.10545190 -1.91607786 ## [43] 1.34541263 1.17530459 -0.45175615 -0.14450153 1.02263650 1.37649784 ## [49] 0.27016961 0.87662367 0.22377004 1.21348959 0.61573198 -1.20120524 ## [55] -0.61711599 -0.11880700 0.93196603 -0.28889917 -0.26109819 -1.41037894 ## [61] -0.60772438 0.52747592 -0.24308719 -0.01487819 -1.34440597 -0.59004112 ## [67] -1.52683320 -2.31706762 0.92548802 -0.60141709 -1.97861518 0.69757896 ## [73] -0.74892933 0.30454488 0.21319253 -0.42656296 -2.57797984 0.92988517 ## [79] -0.92678645 0.30518547 1.25871723 -0.98091865 1.34390765 -1.15656193 ## [85] -1.02275619 -0.66705916 1.64158743 -1.57601589 0.82983301 0.34866248 ## [91] 0.32183482 0.18272375 -0.58550712 0.16355611 0.71439339 -0.97908184 ## [97] 0.10891223 0.47431984 -1.94068647 0.29180398 実際に、乱数がxに格納されていることが分かります。 オブジェクトを入力引数とすることも可能です。 xの平均と標準偏差を求めてみます。 mean(x) ## [1] -0.09608596 sd(x) ## [1] 1.027264 もちろん、出力引数を新しいオブジェクトにすることもできます。 x.mean &lt;- mean(x) x.mean ## [1] -0.09608596 オブジェクトの名前にはアルファベットと数字、.と_が使えます。 ただし、数字は最初の文字としては使えません。 オブジェクトは上書きすることもできます。 x.mean &lt;- mean(rnorm(100)) B.3 パッケージ 大雑把に言って、Rによるデータ分析はデータをオブジェクトとして読み込み、いろいろな関数で処理を行うことで実行します。 つまり、関数が重要なのですが、Rで標準に備わっている関数には限界があります。 そこで、様々な研究者が関数を作成し、それをまとめたものをパッケージとして公開しています。 基本的に、CRAMでパッケージは公開されます。 パッケージをインストールするには、install.packages()という関数にパッケージ名を入れて実行します。 試しに、Tidyverseという幅広く使われているパッケージをインストールしてみます。 install.packages(&quot;tidyverse&quot;) RStudioの場合、Packagesパネル（デフォルトの場合は右下）の中にInstallというボタンがあり、そこにパッケージ名を入力していインストールすることも可能です。 &quot;でパッケージ名を囲まないとエラーになります。 install.packages(tidyverse) ## Error in install.packages(tidyverse): object &#39;tidyverse&#39; not found インストールしたパッケージに対して再びinstall.packages()を行うと、最新版にアップデートされます。 RStudioの場合、PackagesパネルにUpdateというボタンがあり、アップデートできるパッケージを自動検索してくれます。 パッケージはインストールしただけでは使用することはできず、library()で読み込む必要があります。 library(tidyverse) この場合は&quot;で囲む必要はありません。 インストールは一回で十分です。 RStudioであればPackagesパネルにインストール済みのパッケージ一覧があるので、パッケージ名をクリックすると含まれる関数一覧を見ることができます。 同様のものはCRAMでもpdf形式で見ることができます。 一部のソフトウェアはJournal of Statistical Softwareなどで論文が公開されています。 B.3.1 Tidyverseとは B.4 Rスクリプト B.5 Rプロジェクト B.6 関数の作成 Rで関数を自作する際はfunction(){}という関数を使います。 ()の中に入力引数を記述します。 {}の中に処理内容を記述し、最後にreturn()で出力引数を指定します。 例えば、数値ベクトルを入力引数として、平均と標準偏差を出力引数とする関数を作成します。 mean_sd &lt;- function(x) { # 入力引数の名前をxとしておきます。 mean.x &lt;- mean(x) # 平均を計算します。 sd.x &lt;- sd(x) # 標準偏差を計算します。 return(c(mean.x, sd.x)) # 出力引数を指定します。 } 実際に実行してみます。 x &lt;- rnorm(100) mean_sd(x) ## [1] -0.03289726 0.94517521 B.7 ループ ループとは同一の処理を複数回実行することを指します。 例えば、100個の標準正規分布に従う乱数の平均を5回求める処理は次のようになります。 for (i in 1:5) { print(mean(rnorm(100))) } ## [1] 0.09287318 ## [1] -0.02250337 ## [1] -0.02287949 ## [1] -0.05430733 ## [1] -0.06347422 forループとは()の中のinのあとのベクトルの第1要素から順番にiに代入して繰り返しています。 そのことは、次の例から解ると思います。 head(letters) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; lettersとはアルファベットのベクトルです。 for (i in head(letters)) { print(i) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; ## [1] &quot;f&quot; forループとは別に、特定の条件が満たされるまで繰り返されるwhileループもあります。 ループ処理の結果を格納するには少しテクニックが必要です。 100個の乱数の平均を5回取ったものをxとして保存したいとします。 まず、xをNULLオブジェクトとして作成します。 x &lt;- NULL x ## NULL NULLとは空っぽのオブジェクト（0という数値や空白という文字ではない）です。 先程のループ処理の中で、計算した平均をc()でxにくっつけていきます。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] -0.10376803 -0.06620505 -0.05105917 -0.14331970 -0.07947723 無事、5個の平均値がxに保存されていることがわかります。 実際にforループの中で何が起こっているかは、次のコードで解ると思います。 x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) print(x) } ## [1] 0.164474 ## [1] 0.164474006 -0.007479491 ## [1] 0.164474006 -0.007479491 -0.012169254 ## [1] 0.164474006 -0.007479491 -0.012169254 0.061909820 ## [1] 0.164474006 -0.007479491 -0.012169254 0.061909820 -0.062421743 ループが一周するたびに、前回のxに新しい要素が付け加わり、新しいxとして保存されています。 NULLオブジェクトを使ったループ結果の保存でよくあるミスは、やり直す際にNULLでリセットするのを忘れることです。 例えば、同じコードをもう一度実行しましょう。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] 0.164474006 -0.007479491 -0.012169254 0.061909820 -0.062421743 ## [6] 0.116766995 -0.018552398 0.068833514 -0.123256736 -0.099229488 xに10個の平均値が入っています。 このようなミスを避ける方法の一つは、全体を関数として作成することです。 multi_mean &lt;- function() { x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } return(x) } x &lt;- multi_mean() x ## [1] -0.07698118 -0.03459311 -0.11326715 -0.07596711 -0.13516825 B.8 条件分岐 条件分岐とは、特定の条件の場合に特定の動作を行うようにすることです。 例えば、正の場合positive、負の場合negativeと出力するコマンドは次のようになります。 x &lt;- rnorm(1) if (x &gt; 0) { print(&quot;positive&quot;) } else { print(&quot;negative&quot;) } ## [1] &quot;positive&quot; print(x) ## [1] 0.3454467 if(){}の()の中に条件式を書き、{}の中に処理内容を書きます。 それ以外の条件はelseで示します。 条件式は3つ以上でも構いません。 x &lt;- rnorm(1) if (x &gt; -0.5) { print(&quot;x is less than -0.5.&quot;) } else if (x &gt;= -0.5 &amp; x &lt;= 0.5) { print(&quot;x is between -0.5 and 0.5.&quot;) } else { print(&quot;x is more than 0.5.ー&quot;) } ## [1] &quot;x is less than -0.5.&quot; print(x) ## [1] 0.1128649 &amp;は「かつ」を意味します。 「または」は|を使います。 &gt;=は \\(\\geq\\) を意味します。 「同じ値である」は==を使います（=ではない点に注意）。 B.9 練習問題：フィボナッチ数列 フィボナッチ数列とは以下の条件を満たす数列です。 \\[ \\begin{aligned} F_0 &amp;= 0 \\\\ F_1 &amp;= 1 \\\\ F_{n} &amp;= F_{n-1} + F_{n-2} \\quad n \\geq 2 \\end{aligned} \\] 例えば、 \\[ \\begin{aligned} F_2 = 1, F_3 = 2, F_4 = 3, F_5 = 5, F_6 = 8,\\ldots \\end{aligned} \\] となります。 フィボナッチ数列の第\\(n\\)項を（解析解を使わずに）求める関数を作成してみて下さい。 B.10 練習問題：モンテカルロ・シミュレーション モンテカルロ・シミュレーション（モンテカルロ法）とは乱数を用いて近似解を求める手法です。 例えば、円周率\\(\\pi\\)の近似解は以下のように求めることができます。 0以上1未満の一様分布から\\(n\\)個の乱数\\(x_i\\)と\\(n\\)個の乱数\\(y_i\\)を発生させます (\\(i = 1,2,\\ldots,n\\)) 。 原点と\\((x_i,y_i)\\)の距離が1以下である回数を計算し\\(n_1\\)とします。 円周率の近似解として\\(\\hat{\\pi} = 4 \\times n_1/n\\)を得ます。 モンテカルロ・シミュレーションによる円周率の近似解を求める関数を作成してみて下さい。 また、モンテカルロ・シミュレーションによる円周率の近似解を\\(m\\)回求めて、その平均値や標準偏差が\\(n\\)によってどのように変化するか検討してみて下さい。 "],
["environment.html", "動作環境", " 動作環境 sessionInfo() ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.4 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] forcats_0.5.0 stringr_1.4.0 dplyr_0.8.5 purrr_0.3.3 ## [5] readr_1.3.1 tidyr_1.0.2 tibble_3.0.0 ggplot2_3.3.0 ## [9] tidyverse_1.3.0 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.0.0 xfun_0.13 haven_2.2.0 lattice_0.20-41 ## [5] colorspace_1.4-1 vctrs_0.2.4 generics_0.0.2 htmltools_0.4.0 ## [9] yaml_2.2.1 rlang_0.4.5 pillar_1.4.3 withr_2.1.2 ## [13] glue_1.4.0 DBI_1.1.0 dbplyr_1.4.2 modelr_0.1.6 ## [17] readxl_1.3.1 lifecycle_0.2.0 munsell_0.5.0 gtable_0.3.0 ## [21] cellranger_1.1.0 rvest_0.3.5 evaluate_0.14 knitr_1.28 ## [25] fansi_0.4.1 broom_0.5.5 Rcpp_1.0.4.6 backports_1.1.6 ## [29] scales_1.1.0 jsonlite_1.6.1 fs_1.4.1 hms_0.5.3 ## [33] digest_0.6.25 stringi_1.4.6 bookdown_0.18 grid_3.6.3 ## [37] cli_2.0.2 tools_3.6.3 magrittr_1.5 crayon_1.3.4 ## [41] pkgconfig_2.0.3 ellipsis_0.3.0 xml2_1.3.1 reprex_0.3.0 ## [45] lubridate_1.7.8 assertthat_0.2.1 rmarkdown_2.1 httr_1.4.1 ## [49] rstudioapi_0.11 R6_2.4.1 nlme_3.1-144 compiler_3.6.3 "],
["references.html", "参考文献", " 参考文献 "]
]
