[
["intro-r.html", "補論B Rプログラミング入門 B.1 関数 B.2 オブジェクト B.3 パッケージ B.4 Rスクリプト B.5 Rプロジェクト B.6 関数の作成 B.7 ループ B.8 条件分岐 B.9 練習問題：フィボナッチ数列 B.10 練習問題：モンテカルロ・シミュレーション", " 補論B Rプログラミング入門 B.1 関数 関数 (function) とは何かを入力すると、何かを出力するものです。 例えば、 print(&quot;Hello, World.&quot;) ## [1] &quot;Hello, World.&quot; というコードは、&quot;Hello, World.&quot;という文字列をprint()という関数に入力し、その文字列を出力しています。 Rでは、関数は関数名()という形を取ります。 入力するものを入力引数 (input argument) 、出力するものを出力引数 (output argument) と呼んだりします。 次のように、入力引数も出力引数も1つとは限りません。 rnorm(n = 10, mean = 0, sd = 1) ## [1] -0.70921526 0.71970880 0.56027333 1.14937646 -0.42306474 -0.01710589 ## [7] 1.31934106 -0.51106284 -1.89525826 -0.14983030 さて、この関数は何をしているのでしょうか。 Rでは、関数名の前に?をつけて実行することで、その関数のヘルプを見ることができます。 ?rnorm 英語で関数の使い方が解説されていますが、rnorm(n = 10, mean = 0, sd = 1)は平均0、標準偏差1の（標準）正規分布に従う乱数を10個だけ生じさせています。 入力引数は=で明示的に指定する場合、どのような順番でも構いません。 rnorm(mean = 0, sd = 1, n = 10) 入力引数を明示的に指定しない場合、ヘルプにある順番で入力します。 以下の例は上述のものと同じです。 rnorm(10, 0, 1) また、ヘルプでmean = 0, sd = 1のように書かれている場合、デフォルトが定められています。 実行者が入力引数を指定しない限り、デフォルト値が使用されます。 したがって、以下の例もこれまでと同じコードです。 ｘ rnorm(10) B.2 オブジェクト Rでは&lt;-でオブジェクトを作成することができます。 例えば、100個の正規分布に従う乱数をxという名前のオブジェクトとして作成します。 x &lt;- rnorm(100) RStudioでは&lt;-はショートカットAlt + -で入力できます。 x ## [1] -0.358954809 -0.256783721 -0.619480408 -2.708847886 -0.321809975 ## [6] 0.013015965 -1.832401439 0.583033179 -1.222317819 0.658753186 ## [11] 0.161475880 -0.333505715 0.516521725 -0.422811085 -0.934057287 ## [16] 0.613373956 0.923323392 -0.797291863 0.854144605 -1.185549242 ## [21] 0.495397028 -1.040374469 0.355559816 -0.632279365 -0.077800901 ## [26] -0.525662832 -1.177178106 0.855902624 -0.234499348 -1.417020673 ## [31] -0.595646522 -2.326665771 1.778174524 0.425044480 0.693061634 ## [36] 0.384046614 0.135826499 -0.124915001 0.189388884 0.004145034 ## [41] -0.356128957 0.614798420 1.344255453 0.141848542 2.151323278 ## [46] 0.739242781 0.175971965 0.223961903 0.426961227 -1.299715242 ## [51] 2.005056576 0.448214241 0.299664519 2.164076938 -0.867973815 ## [56] 0.070595166 1.002663922 -0.293006971 -1.770478765 1.310488379 ## [61] 0.545261056 1.328175219 -0.069246084 -1.340151677 0.443870211 ## [66] 0.263466857 2.289819180 -0.928157012 1.299034158 -0.776739122 ## [71] -0.804254369 -0.974771288 -0.096316303 -0.155887746 0.738280425 ## [76] -1.373627868 -0.262358782 -0.424146942 1.102183273 -1.362949562 ## [81] -1.049788705 2.413035837 0.684413867 0.116308035 1.642347052 ## [86] 0.051622553 0.681821959 -0.839110045 0.448651274 1.044486089 ## [91] 0.111253485 -0.545884603 -1.525322289 0.658937413 1.433322306 ## [96] -1.907497513 -0.550041825 0.081937009 0.193100507 -1.258022479 実際に、乱数がxに格納されていることが分かります。 オブジェクトを入力引数とすることも可能です。 xの平均と標準偏差を求めてみます。 mean(x) ## [1] 0.003532079 sd(x) ## [1] 1.02272 もちろん、出力引数を新しいオブジェクトにすることもできます。 x.mean &lt;- mean(x) x.mean ## [1] 0.003532079 オブジェクトの名前にはアルファベットと数字、.と_が使えます。 ただし、数字は最初の文字としては使えません。 オブジェクトは上書きすることもできます。 x.mean &lt;- mean(rnorm(100)) B.3 パッケージ 大雑把に言って、Rによるデータ分析はデータをオブジェクトとして読み込み、いろいろな関数で処理を行うことで実行します。 つまり、関数が重要なのですが、Rで標準に備わっている関数には限界があります。 そこで、様々な研究者が関数を作成し、それをまとめたものをパッケージとして公開しています。 基本的に、CRAMでパッケージは公開されます。 パッケージをインストールするには、install.packages()という関数にパッケージ名を入れて実行します。 試しに、Tidyverseという幅広く使われているパッケージをインストールしてみます。 install.packages(&quot;tidyverse&quot;) RStudioの場合、Packagesパネル（デフォルトの場合は右下）の中にInstallというボタンがあり、そこにパッケージ名を入力していインストールすることも可能です。 &quot;でパッケージ名を囲まないとエラーになります。 install.packages(tidyverse) ## Error in install.packages(tidyverse): object &#39;tidyverse&#39; not found インストールしたパッケージに対して再びinstall.packages()を行うと、最新版にアップデートされます。 RStudioの場合、PackagesパネルにUpdateというボタンがあり、アップデートできるパッケージを自動検索してくれます。 パッケージはインストールしただけでは使用することはできず、library()で読み込む必要があります。 library(tidyverse) この場合は&quot;で囲む必要はありません。 インストールは一回で十分です。 RStudioであればPackagesパネルにインストール済みのパッケージ一覧があるので、パッケージ名をクリックすると含まれる関数一覧を見ることができます。 同様のものはCRAMでもpdf形式で見ることができます。 一部のソフトウェアはJournal of Statistical Softwareなどで論文が公開されています。 B.3.1 Tidyverseとは B.4 Rスクリプト B.5 Rプロジェクト B.6 関数の作成 Rで関数を自作する際はfunction(){}という関数を使います。 ()の中に入力引数を記述します。 {}の中に処理内容を記述し、最後にreturn()で出力引数を指定します。 例えば、数値ベクトルを入力引数として、平均と標準偏差を出力引数とする関数を作成します。 mean_sd &lt;- function(x) { # 入力引数の名前をxとしておきます。 mean.x &lt;- mean(x) # 平均を計算します。 sd.x &lt;- sd(x) # 標準偏差を計算します。 return(c(mean.x, sd.x)) # 出力引数を指定します。 } 実際に実行してみます。 x &lt;- rnorm(100) mean_sd(x) ## [1] -0.08350387 1.00523217 B.7 ループ ループとは同一の処理を複数回実行することを指します。 例えば、100個の標準正規分布に従う乱数の平均を5回求める処理は次のようになります。 for (i in 1:5) { print(mean(rnorm(100))) } ## [1] -0.1594322 ## [1] 0.07108911 ## [1] 0.3693096 ## [1] 0.00563974 ## [1] -0.04083269 forループとは()の中のinのあとのベクトルの第1要素から順番にiに代入して繰り返しています。 そのことは、次の例から解ると思います。 head(letters) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; lettersとはアルファベットのベクトルです。 for (i in head(letters)) { print(i) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; ## [1] &quot;f&quot; forループとは別に、特定の条件が満たされるまで繰り返されるwhileループもあります。 ループ処理の結果を格納するには少しテクニックが必要です。 100個の乱数の平均を5回取ったものをxとして保存したいとします。 まず、xをNULLオブジェクトとして作成します。 x &lt;- NULL x ## NULL NULLとは空っぽのオブジェクト（0という数値や空白という文字ではない）です。 先程のループ処理の中で、計算した平均をc()でxにくっつけていきます。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] 0.04187009 0.07546861 0.03156113 0.09697355 -0.08044722 無事、5個の平均値がxに保存されていることがわかります。 実際にforループの中で何が起こっているかは、次のコードで解ると思います。 x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) print(x) } ## [1] -0.1194536 ## [1] -0.11945360 0.08760491 ## [1] -0.11945360 0.08760491 0.07653950 ## [1] -0.11945360 0.08760491 0.07653950 -0.15393554 ## [1] -0.11945360 0.08760491 0.07653950 -0.15393554 0.05700277 ループが一周するたびに、前回のxに新しい要素が付け加わり、新しいxとして保存されています。 NULLオブジェクトを使ったループ結果の保存でよくあるミスは、やり直す際にNULLでリセットするのを忘れることです。 例えば、同じコードをもう一度実行しましょう。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] -0.119453598 0.087604913 0.076539505 -0.153935541 0.057002765 ## [6] 0.106662797 0.004863151 0.250623115 0.024552154 0.042991161 xに10個の平均値が入っています。 このようなミスを避ける方法の一つは、全体を関数として作成することです。 multi_mean &lt;- function() { x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } return(x) } x &lt;- multi_mean() x ## [1] 0.12853635 -0.10912494 -0.01484912 -0.01036399 -0.09959637 B.8 条件分岐 条件分岐とは、特定の条件の場合に特定の動作を行うようにすることです。 例えば、正の場合positive、負の場合negativeと出力するコマンドは次のようになります。 x &lt;- rnorm(1) if (x &gt; 0) { print(&quot;positive&quot;) } else { print(&quot;negative&quot;) } ## [1] &quot;negative&quot; print(x) ## [1] -0.1935612 if(){}の()の中に条件式を書き、{}の中に処理内容を書きます。 それ以外の条件はelseで示します。 条件式は3つ以上でも構いません。 x &lt;- rnorm(1) if (x &gt; -0.5) { print(&quot;x is less than -0.5.&quot;) } else if (x &gt;= -0.5 &amp; x &lt;= 0.5) { print(&quot;x is between -0.5 and 0.5.&quot;) } else { print(&quot;x is more than 0.5.ー&quot;) } ## [1] &quot;x is less than -0.5.&quot; print(x) ## [1] 0.3957145 &amp;は「かつ」を意味します。 「または」は|を使います。 &gt;=は \\(\\geq\\) を意味します。 「同じ値である」は==を使います（=ではない点に注意）。 B.9 練習問題：フィボナッチ数列 フィボナッチ数列とは以下の条件を満たす数列です。 \\[ \\begin{align} F_0 &amp;= 0 \\\\ F_1 &amp;= 1 \\\\ F_{n} &amp;= F_{n-1} + F_{n-2} \\quad n \\geq 2 \\end{align} \\] 例えば、 \\[ \\begin{align} F_2 = 1, F_3 = 2, F_4 = 3, F_5 = 5, F_6 = 8,\\ldotsF \\end{align} \\] となります。 フィボナッチ数列の第\\(n\\)項を（解析解を使わずに）求める関数を作成してみて下さい。 B.10 練習問題：モンテカルロ・シミュレーション モンテカルロ・シミュレーション（モンテカルロ法）とは乱数を用いて近似解を求める手法です。 例えば、円周率\\(\\pi\\)の近似解は以下のように求めることができます。 0以上1未満の一様分布から\\(n\\)個の乱数\\(x_i\\)と\\(n\\)個の乱数\\(y_i\\)を発生させます (\\(i = 1,2,\\ldots,n\\)) 。 原点と\\((x_i,y_i)\\)の距離が1以下である回数を計算し\\(n_1\\)とします。 円周率の近似解として\\(\\hat{\\pi} = 4 \\times n_1/n\\)を得ます。 モンテカルロ・シミュレーションによる円周率の近似解を求める関数を作成してみて下さい。 また、モンテカルロ・シミュレーションによる円周率の近似解を\\(m\\)回求めて、その平均値や標準偏差が\\(n\\)によってどのように変化するか検討してみて下さい。 "]
]
