[
["index.html", "Rで計量政治学入門 はじめに 想定する読者 Tidyverseについて ウェブサイトの操作", " Rで計量政治学入門 土井 翔平 2020-04-20 はじめに 本書はRによる計量政治学の入門レベルの講義資料です。 質問や間違いなどがありましたら、ご連絡を下さい。 筆者のプロフィールはこちらをご覧ください。 想定する読者 本書は、データ分析や数学の前提知識やプログラミング経験のない社会科学系学部生を主たる読者として想定しています。 やや高度と思われる箇所には*を付けているので、読み飛ばしても構いません。 なお、RやRStudioのインストールについてはRの分析環境を、基本操作についてはRプログラミング入門をご覧ください。 Tidyverseについて Tidyverseとは様々なデータ操作に関するパッケージ群（あるいはそのプロジェクト）を指します。 本書では、可能な限り、Rの標準関数を用いた表記とTidyverseによる表記を併記するようにします。 しかし、筆者はTidyverseに慣れているので、しばしば標準関数によるコードを省略します。 ウェブサイトの操作 本書はbookdownを用いて作成しています。 ウェブサイトのナビゲーションバーでは、 三本線のボタンで目次の表示・非表示の切り替え 虫眼鏡のマークで単語検索 Aのマークで文字の大きさ、フォント、色のコントロール iのマークでキーボードによる操作方法の表示 が可能です。 "],
["data-import.html", "第1章 データの読み込み 1.1 パッケージ付属のデータ 1.2 .csvファイルの読み込み", " 第1章 データの読み込み 本章ではデータを読み込む方法について解説します。 library(tidyverse) ## ── Attaching packages ──────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.4 ## ✓ tibble 3.0.0 ✓ dplyr 0.8.5 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ─────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 1.1 パッケージ付属のデータ Rは標準でいくつかのデータセットを持っており、またパッケージを読み込むと付属のデータセットも読み込みます。 data()に何も入力せずに実行すると、データセットの一覧が表示されます。 data() よく、使われるデータセットはフィッシャーのアヤメのデータセットで、irisという名前で保存されています。 head(iris) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa head()は最初のいくつかの要素だけを表示する関数です（tail()は最後からいくつかを表示します）。 1.2 .csvファイルの読み込み "],
["install-r.html", "第2章 Rの分析環境 2.1 Rのインストール 2.2 RStudioのインストール 2.3 再現可能な分析のために", " 第2章 Rの分析環境 Rは統計用のプログラミング言語です。 他に、特に機械学習の分野ではPythonやJuliaも人気です。 政治学や経済学ではStataという統計ソフトも人気ですが有料という難点があります。 また、RStudioはRを便利に使うための統合開発環境 (IDE) です。 RStudio以外にもあるもののデファクトスタンダードになっている感はあります。 RStudioはあくまでRを使いやすくするためのもので、R本体ではありません。 なので、まずはRをインストールしてからRStudioをインストールします。 2.1 Rのインストール 2.1.1 ダウンロード まずはRの公式サイトへ行き（右クリックで新しいタブで開くことができます）、download Rをクリックします。 次にダウンロードする際のミラーサイトを選びます。 好きな国のものを選んでいいですが、ここでは日本の統計数理研究所のものを選んでおきます。 自分のPCのOSに応じたものを選択します。 2.1.1.1 Windowsの場合 install R for the first timeを選択します。 Downlosd R X.X.X for YYYを選択してダウンロードします。 分かりやすいようにダウンロードフォルダにダウンロードしておきます。 Windowsの場合、Rtoolsをインストールもインストールしておきましょう。 2.1.1.2 Macintoshの場合 2.1.2 インストール Rをダウンロードしたフォルダを開き、ファイルをクリックします。 ファイル名はOSによって異なります。 その後は表示されるままに進めていけばよいです。 Rは基本的にOSの言語で表示されますが、英語で使いたい場合はMessage Translationsのインストールにチェックが入っている場合は外しておきましょう。 英語のエラーメッセージで検索したほうが解決策が見つけやすくなります。 2.2 RStudioのインストール 2.2.1 ダウンロード RStudioの公式サイトからRStudioのダウンロードサイトへ行きます。 下の方にインストーラーをダウンロードするリンクがあるのでOSに応じたものを選択します。 安定版ではないけれど最新のRStudioを使いたい人はRStudio Previewをインストールしてください。 また、RやRStudioをインストールせずにオンラインで使用できるRStudio Cloudというものもあります。 2.2.2 インストール あとはダウンロードしたフォルダに移り、インストーラーを起動して表示されるがままに進めていきます。 2.2.3 RStudioの起動 RStudioのショートカットをクリックしたり、メニューでRStudioと入力してクリックすると起動するはずです。 RStudioを初めて起動すると次のような表示になるとはずです。 左側の大きなパネルでRが表示されていればインストールの成功です。 ちなみに、Tools &gt; Global Options &gt; Appearanceではフォントや背景・ハイライトの色を変えることができます。 ダークな背景を選択するとRStudio全体もダークテーマになります。 2.2.4 RStudio Cloud* RStudio CLoudにより、RStudioをブラウザを使ってオンラインで使用することができます。 複数のユーザーで共同作業を行うことも可能です。 LinuxユーザーはRStudio Serverを使って自らサーバを立てることもできます。 2.3 再現可能な分析のために 再現可能性 (replicability) とは、狭義では、誰がどんな環境で分析しても。オリジナルの分析結果と（ほぼ）同じものを得られることだと思っています。 以下では、再現可能性を担保できるようなR/RStudioの使い方を解説します。 2.3.1 Rスクリプト まず、分析の手順を記録に残し、公開する必要があります。 RではRスクリプトと呼ばれるファイル（拡張子は.R）を作成し、そこにコードを残して起きます。 もちろん、使用したデータも公開する必要があるのは言うまでもありません。 2.3.1.1 Rスクリプトの作成 RStudioでは左上のFile &gt; New File &gt; RScriptもしくは白い紙に緑色のプラスマークのボタンを押してR Scriptを選択します。 すると、デフォルトでは左上のパネルにRスクリプトのエディタが表示されます。 2.3.1.2 Rスクリプトの展開 RスクリプトをRStudioで開くには左上のFile &gt; Open Fileで選択します。 2.3.1.3 Rスクリプトの実行 Rスクリプトに書かれたコードはCtrl + Enterを押すと、カーソルのある行がコンソールに流れ、実行されます。 2.3.2 Rプロジェクト データの読み込みで解説したように、データの読み込みや保存の際には起点となる作業ディレクトリ (working directory) を決める必要があります。 一般的に、作業ディレクトリはPCによって変わってしまうので、Rプロジェクトを立てることでその問題を回避します。 簡単に言えば、Rプロジェクトをクリックすることで自動的に作業ディレクトリが設定された状態でRStudioを起動することができます。 また、プロジェクトごとにRStudioを起動できるので、異なるプロジェクト間でデータやRスクリプトが混在することも回避できます。 ひとまず、新しい分析を行う際は必ずRプロジェクトを作成するようにしましょう。 2.3.2.1 Rプロジェクトの作成 まずは、プロジェクトの作り方ですが、RStudioの左上の青いボタンをクリックします。 続いて、新たにプロジェクト用のフォルダを作るのであればNew Directoryを、既存のフォルダをプロジェクト用にするのであればExisting Directoryを選択します。 基本的にはNew Projectを選択します。 最後に、プロジェクト用のフォルダの名前とそのフォルダを置くフォルダのパスを指定してCreate Projectをクリックします。 フォルダ名は必ず英数字と-や_で書き、日本語は避けましょう。 既存のフォルダを使う場合はパスを指定するだけです。 例えば今回はDocumentsフォルダの中にtestという名前のプロジェクトを作成しました。 一度、RStudioを終了し、先程指定したパス通りの場所にフォルダができていることを確認してください。 そのフォルダの中に、プロジェクト名と同じ名前の.Rprojファイルができているはずです。 2.3.2.2 プロジェクトの起動 それをダブルクリックしてみるとRStudioが起動されます。 このとき、すでに作業ディレクトリはプロジェクト用フォルダに指定されているのです。 getwd()で作業ディレクトリを確認してみて下さい。 2.3.2.3 ワークスペースの保存と再開* どうしても一度分析を中断して、再開したい場合はワークスペースを保存しておきましょう。 上記画面でSave workflow to .RData on exitがAskになっている場合、RStudioを終了する際にワークスペースを保存するのか聞かれるはずなので、保存します。 ちなみに、.RDataファイルはRのワークスペース（の一部）を保存するデータ形式です。 すると、フォルダ内に.RDataファイルができるので、再開するときにload()に当該ファイルのパスを入力して実行するとワークスペースが復元されます。 2.3.3 RStudioの設定* 2.3.3.1 RStudio起動時の挙動 Tools &gt; Global Optionsを開き、Genralの中で以下のチェックを外します。 平たく言うとRStudioを起動したときに前回の続きが残っていない真っさらな状態にしておきます。 2.3.3.2 文字コード 日本語がしばしば文字化けすることがあります。 なぜならWindowsではShift-JIS、LinuxとMacではUTF-8と呼ばれるエンコーディング（平たく言うとPCが文字を表示する方法）形式だからです。 詳しくはRにおける文字コードを参照して下さい。 UTF-8が世界的に使われているので、Code &gt; Saving &gt; Default text encodingをUTF-8にしておきます。 もし、日本語を含むファイルをRStudioで開いたときに文字化けしている場合、Windowsを使っている人はUTF-8のファイルをShift-JISで開いたということなので、File &gt; Reopen with EncodingでUTF-8を選択します。 逆にMacの場合はShift-JISのファイルをUTF-8で開いているので同様にShift-JISで開きます。 Windowsの人はUTF-8をデフォルトのエンコーディングにしてしまうといいでしょう。 "],
["intro-r.html", "第3章 Rプログラミング入門 3.1 関数 3.2 オブジェクト 3.3 パッケージ", " 第3章 Rプログラミング入門 Rによるプログラミングの基本として、 オブジェクト 関数 パッケージ について解説します。 大雑把に言えば、Rではオブジェクトとしてデータを読み込み、関数によってオブジェクト（＝データ）の処理や分析を行います。 パッケージによって様々な関数を追加することで、処理や分析の幅を広げます。 RStudioでは左（下）にコンソールが表示され、&gt;の右側にコマンドを打ち込み、Enterを押すことで実行されます。 本格的に分析する場合はRスクリプトを作成します。 3.1 関数 関数 (function) とは何かを入力すると、何かを出力するものです。 例えば、 print(&quot;Hello, World.&quot;) ## [1] &quot;Hello, World.&quot; というコードは、&quot;Hello, World.&quot;という文字列をprint()という関数に入力し、その文字列を出力しています。 Rでは、関数は関数名()という形を取ります。 入力するものを入力引数 (input argument) 、出力するものを出力引数 (output argument) と呼んだりします。 次のように、入力引数も出力引数も1つとは限りません。 rnorm(n = 10, mean = 0, sd = 1) ## [1] -0.65282540 -0.43564532 0.06185048 -1.12796413 0.04346689 -0.49309274 ## [7] -1.24943158 0.21493917 -0.38743285 -0.47350841 さて、この関数は何をしているのでしょうか。 Rでは、関数名の前に?をつけて実行することで、その関数のヘルプを見ることができます。 ?rnorm 英語で関数の使い方が解説されていますが、rnorm(n = 10, mean = 0, sd = 1)は平均0、標準偏差1の（標準）正規分布に従う乱数を10個だけ生じさせています。 入力引数は=で明示的に指定する場合、どのような順番でも構いません。 rnorm(mean = 0, sd = 1, n = 10) 入力引数を明示的に指定しない場合、ヘルプにある順番で入力します。 以下の例は上述のものと同じです。 rnorm(10, 0, 1) また、ヘルプでmean = 0, sd = 1のように書かれている場合、デフォルトが定められています。 実行者が入力引数を指定しない限り、デフォルト値が使用されます。 したがって、以下の例もこれまでと同じコードです。 rnorm(10) 3.1.1 総称関数* 総称関数 (generic function) とは、Rにおいて入力引数の種類に応じて挙動が変わる関数のことを指します。 例えば、summary()という関数はデータフレームが入力引数の場合には記述統計を表示しますが、回帰分析の結果の場合は回帰表を出力します。 総称関数のヘルプを見る場合は、以下のように、関数名に.をつけて入力引数の種類を書きます。 ?summary.data.frame ?summary.lm 3.2 オブジェクト Rでは&lt;-でオブジェクトを作成することができます。 例えば、20個の正規分布に従う乱数をxという名前のオブジェクトとして作成します。 x &lt;- rnorm(20) RStudioでは&lt;-はショートカットAlt + -で入力できます。 実際に、乱数がxに格納されていることが分かります。 x ## [1] -0.21761947 0.12883624 -0.19287704 -0.52989960 -0.69211997 1.44765002 ## [7] 0.01488584 0.11478631 0.68175578 -0.13038269 -0.61286884 -0.09706344 ## [13] -1.67217426 -0.29116437 -0.23383987 -0.06702058 -0.02082913 -0.19052914 ## [19] -0.90594159 0.99437344 RStudioの場合、右上のEnvironmentパネルに生成されたオブジェクトが表示されます。 オブジェクトを入力引数とすることも可能です。 xの平均と標準偏差を求めてみます。 mean(x) ## [1] -0.1236021 sd(x) ## [1] 0.6616447 もちろん、出力引数を新しいオブジェクトにすることもできます。 x.mean &lt;- mean(x) x.mean ## [1] -0.1236021 オブジェクトの名前にはアルファベットと数字、.と_が使えます。 ただし、数字は最初の文字としては使えません。 オブジェクトは上書きすることもできます。 x.mean &lt;- mean(rnorm(20)) x.mean ## [1] -0.1580766 先ほどとは違う値に上書きされていることが分かります。 3.3 パッケージ 大雑把に言って、Rによるデータ分析はデータをオブジェクトとして読み込み、いろいろな関数で処理を行うことで実行します。 つまり、関数が重要なのですが、Rで標準に備わっている関数には限界があります。 そこで、様々な研究者が関数を作成し、それをまとめたものをパッケージとして公開しています。 基本的に、CRANでパッケージは公開されます。 ライブラリやモジュールと呼んだりすることもあります。 3.3.1 CRANからのインストール パッケージをインストールするには、install.packages()という関数にパッケージ名を入れて実行します。 試しに、Tidyverseという幅広く使われているパッケージをインストールしてみます。 install.packages(&quot;tidyverse&quot;) &quot;でパッケージ名を囲まないとエラーになります。 install.packages(tidyverse) ## Error in install.packages(tidyverse): object &#39;tidyverse&#39; not found RStudioの場合、Packagesパネル（デフォルトの場合は右下）の中にInstallというボタンがあり、 そこにパッケージ名を入力してインストールすることも可能です。 インストールしたパッケージに対して再びinstall.packages()を行うと、最新版にアップデートされます。 RStudioの場合、PackagesパネルにUpdateというボタンがあり、アップデートできるパッケージを自動検索してくれます。 3.3.2 GitHubからのインストール* パッケージの開発版や一部のパッケージはGitHub上で公開されています。 GitHub上のパッケージをインストールする場合はdevtoolsというパッケージを使うので、まずはインストールと読み込みを行います。 install.packages(&quot;devtools&quot;) library(devtools) インストールにはinstall_github()を使いますが、入力はパッケージ名ではなくユーザー名/レポジトリ名となる点に注意してください。 3.3.3 パッケージの読み込み パッケージはインストールしただけでは使用することはできず、library()で読み込む必要があります。 library(tidyverse) この場合は&quot;で囲む必要はありません。 インストールは一回で十分です。 RStudioであればPackagesパネルにインストール済みのパッケージ一覧があるので、パッケージ名をクリックすると含まれる関数一覧を見ることができます。 同様のものはCRANでもpdf形式で見ることができます。 一部のソフトウェアはJournal of Statistical Softwareなどで論文が公開されています。 3.3.4 tidyverseとは* Tidyverseとは広義にはRにおけるデータ処理を行うためのパッケージを開発するプロジェクトであり、狭義にはそこで開発されたパッケージの一部を指します。 具体的には、 ggplot2 dplyr tidyr readr purrr tibble stringr forcats になります。 パッケージとしてのtidyverseを読み込むことで、上記のパッケージを読み込んでいます。 なお、プロジェクト全体としては、上記のもの以外にも多くのパッケージが開発されています。 "],
["inter-r.html", "第4章 Rプログラミング応用* 4.1 オブジェクトのクラス 4.2 関数の作成 4.3 ループ 4.4 条件分岐 4.5 練習問題", " 第4章 Rプログラミング応用* Rによる、より高度な作業のために 代表的なオブジェクトのクラス オリジナルの関数の作成 ループや条件分岐 などを学びます。 4.1 オブジェクトのクラス オブジェクトの種類をクラスと呼びます。 class()にオブジェクトを入力するとクラスが分かります。 最も使われるのは数値 ()numeric, real) です。 class(1) ## [1] &quot;numeric&quot; 厳密には数値と整数 (integer) は異なりますが、気にしないといけない局面は少ないと思います。 class(2L) ## [1] &quot;integer&quot; 他には、文字列 (character) や class(&quot;Hello, World.&quot;) ## [1] &quot;character&quot; 論理値 (logical) などもあります。 class(TRUE) ## [1] &quot;logical&quot; 論理値は主に条件式が満たされるかどうかを示します。 1 == 1 ## [1] TRUE 0 &gt; 2 ## [1] FALSE ちなみに、TRUEは数値としての1、FALSEは0にもなります。 TRUE + 1 ## [1] 2 FALSE * 2 ## [1] 0 また、因子型 (factor) と呼ばれるクラスもあります。 カテゴリカル変数と言ったほうが分かりやすいかもしれません。 x &lt;- factor(1) x ## [1] 1 ## Levels: 1 class(x) ## [1] &quot;factor&quot; Xの中身は1ですが、数値ではなくカテゴリーになっているので、数値として操作することはできません。 x + 1 ## Warning in Ops.factor(x, 1): &#39;+&#39; not meaningful for factors ## [1] NA Rではベクトルには特別なクラスは付与されていません。 ベクトルはc()に中身を入力して作成します。 x &lt;- c(1,3,5) x ## [1] 1 3 5 行列 (matrix) はクラスとして存在します。 x &lt;- matrix(c(1,3,5,7), 2, 2) x ## [,1] [,2] ## [1,] 1 5 ## [2,] 3 7 class(x) ## [1] &quot;matrix&quot; 他に、データフレーム (data.frame) やリスト (list) などもあります。 クラスを確認するときは、is.*()の形をとる関数を使います。 is.numeric(1) ## [1] TRUE is.character(1) ## [1] FALSE クラスを変更するときは、as.*()のような関数を使います。 as.factor(1) ## [1] 1 ## Levels: 1 as.character(1) ## [1] &quot;1&quot; 必ずしも全てのクラスが任意のクラスに変換できるわけではありません（例えば、文字列から数値など）。 4.2 関数の作成 Rで関数を自作する際はfunction(){}という関数を使います。 ()の中に入力引数を記述します。 {}の中に処理内容を記述し、最後にreturn()で出力引数を指定します。 例えば、数値ベクトルを入力引数として、平均と標準偏差を出力引数とする関数を作成します。 mean_sd &lt;- function(x) { # 入力引数の名前をxとしておきます。 mean.x &lt;- mean(x) # 平均を計算します。 sd.x &lt;- sd(x) # 標準偏差を計算します。 return(c(mean.x, sd.x)) # 出力引数を指定します。 } 実際に実行してみます。 x &lt;- rnorm(100) mean_sd(x) ## [1] 0.1221611 1.0553465 4.3 ループ ループとは同一の処理を複数回実行することを指します。 例えば、100個の標準正規分布に従う乱数の平均を5回求める処理は次のようになります。 for (i in 1:5) { print(mean(rnorm(100))) } ## [1] 0.04213202 ## [1] -0.03605993 ## [1] -0.01908854 ## [1] 0.1435498 ## [1] -0.03710384 forループとは()の中のinのあとのベクトルの第1要素から順番にiに代入して繰り返しています。 そのことは、次の例から解ると思います。 head(letters) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; lettersとはアルファベットのベクトルです。 for (i in head(letters)) { print(i) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; ## [1] &quot;f&quot; forループとは別に、特定の条件が満たされるまで繰り返されるwhileループもあります。 ループ処理の結果を格納するには少しテクニックが必要です。 100個の乱数の平均を5回取ったものをxとして保存したいとします。 まず、xをNULLオブジェクトとして作成します。 x &lt;- NULL x ## NULL NULLとは空っぽのオブジェクト（0という数値や空白という文字ではない）です。 先程のループ処理の中で、計算した平均をc()でxにくっつけていきます。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] -0.01214050 0.30355965 0.01960230 -0.04464719 -0.07428760 無事、5個の平均値がxに保存されていることがわかります。 実際にforループの中で何が起こっているかは、次のコードで解ると思います。 x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) print(x) } ## [1] -0.1166518 ## [1] -0.1166518 0.1376299 ## [1] -0.1166518 0.1376299 0.1608739 ## [1] -0.1166518 0.1376299 0.1608739 -0.1012729 ## [1] -0.1166518 0.1376299 0.1608739 -0.1012729 0.1196245 ループが一周するたびに、前回のxに新しい要素が付け加わり、新しいxとして保存されています。 NULLオブジェクトを使ったループ結果の保存でよくあるミスは、やり直す際にNULLでリセットするのを忘れることです。 例えば、同じコードをもう一度実行しましょう。 for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } x ## [1] -0.11665177 0.13762989 0.16087389 -0.10127289 0.11962449 0.01013194 ## [7] 0.05231388 -0.06126935 0.13847725 -0.12277261 xに10個の平均値が入っています。 このようなミスを避ける方法の一つは、全体を関数として作成することです。 multi_mean &lt;- function() { x &lt;- NULL for (i in 1:5) { x &lt;- c(x, mean(rnorm(100))) } return(x) } x &lt;- multi_mean() x ## [1] -0.10310419 0.05383278 0.07416588 -0.11493476 -0.06289729 4.4 条件分岐 条件分岐とは、特定の条件の場合に特定の動作を行うようにすることです。 例えば、正の場合positive、負の場合negativeと出力するコマンドは次のようになります。 x &lt;- rnorm(1) if (x &gt; 0) { print(&quot;positive&quot;) } else { print(&quot;negative&quot;) } ## [1] &quot;positive&quot; print(x) ## [1] 0.3541458 if(){}の()の中に条件式を書き、{}の中に処理内容を書きます。 それ以外の条件はelseで示します。 条件式は3つ以上でも構いません。 x &lt;- rnorm(1) if (x &gt; -0.5) { print(&quot;x is less than -0.5.&quot;) } else if (x &gt;= -0.5 &amp; x &lt;= 0.5) { print(&quot;x is between -0.5 and 0.5.&quot;) } else { print(&quot;x is more than 0.5.ー&quot;) } ## [1] &quot;x is less than -0.5.&quot; print(x) ## [1] -0.01652647 &amp;は「かつ」を意味します。 「または」は|を使います。 &gt;=は \\(\\geq\\) を意味します。 「同じ値である」は==を使います（=ではない点に注意）。 4.5 練習問題 4.5.1 フィボナッチ数列 フィボナッチ数列とは以下の条件を満たす数列です。 \\[ \\begin{aligned} F_0 &amp;= 0 \\\\ F_1 &amp;= 1 \\\\ F_{n} &amp;= F_{n-1} + F_{n-2} \\quad n \\geq 2 \\end{aligned} \\] 例えば、 \\[ \\begin{aligned} F_2 = 1, F_3 = 2, F_4 = 3, F_5 = 5, F_6 = 8,\\ldots \\end{aligned} \\] となります。 フィボナッチ数列の第\\(n\\)項を（解析解を使わずに）求める関数を作成してみて下さい。 また、\\(F_n \\geq m\\)となるような\\(n\\)を求める関数を作成してみて下さい。 4.5.2 モンテカルロ・シミュレーション モンテカルロ・シミュレーション（モンテカルロ法）とは乱数を用いて近似解を求める手法です。 例えば、円周率\\(\\pi\\)の近似解は以下のように求めることができます。 0以上1未満の一様分布から\\(n\\)個の乱数\\(x_i\\)と\\(n\\)個の乱数\\(y_i\\)を発生させます (\\(i = 1,2,\\ldots,n\\)) 。 原点と\\((x_i,y_i)\\)の距離が1以下である回数を計算し\\(n_1\\)とします。 円周率の近似解として\\(\\hat{\\pi} = 4 \\times n_1/n\\)を得ます。 モンテカルロ・シミュレーションによる円周率の近似解を求める関数を作成してみて下さい。 また、モンテカルロ・シミュレーションによる円周率の近似解を\\(m\\)回求めて、その平均値や標準偏差が\\(n\\)によってどのように変化するか検討してみて下さい。 "],
["r-makdown.html", "第5章 R Markdown入門 5.1 R Markdownファイルの作成 5.2 Markdown記法 5.3 Rチャンク 5.4 yamlヘッダー 5.5 その他のテンプレート", " 第5章 R Markdown入門 データ分析の再現可能性の必要性は論を俟たないですが、再現可能性を担保するにはレプリケーションデータやコードを公開するだけでなく、それらが理解可能である必要があります。 恐ろしいことに自分が書いたコードでさえ数カ月後に読み返すと意味がわからないことはまれによくあります。 Rスクリプトに#でコメントするのが単純な方法ですが、データ分析においてはしばしば文章とコード、アウトプットを混在させたノートブックを使用することがあります。 詳しくはないですが文芸的プラグラミングと呼ばれるものの一種のような気がします。 更にノートブックからより見やすいファイルを作成することができ、そのファイルおよびシステムをR Markdownと呼びます。 実は、と言うほどではないですが、このブログもR Markdownで書かれています。 5.1 R Markdownファイルの作成 百聞は一見に如かずなので、一まずはR Markdownを使ってみます。 まず、左上のファイルを作成するボタンを押し、R Markdown...を選択します。 初めてR Markdownを使う場合は必要なパッケージをインストールするか聞かれるのでインストールを選択します。 続いて、どのような種類のR Markdownファイルを作成するかを選択するので、（デフォルトのままですが）DocumentのHTMLを選択します。 すると、エディタに以下のようなサンプルのRmdファイルが表示されます。 適当なフォルダに保存し、エディタ上部のKnitをクリックするかShift + Ctrl + kを押すとR Markdownファイルがタイプセットされます。 無事、タイプセットに成功すると以下のような.htmlファイルのプレビューが表示されます。 .Rmdファイルを保存したフォルダに.htmlファイルが生成されているはずです。 .htmlファイルとはウェブサイトを作成するためのファイルで、ウェブブラウザ（例、FirefoxやGoogle Chrome）で開くことできれいに見れます。 5.1.1 参考になるサイト R Markdownの公式サイト R Markdown: The Definitive Guide R Markdownのチートシート (pdf) 比治山大学の前田和寛先生のR Markdown入門 5.2 Markdown記法 5.2.1 Markdownとは* R MarkdownとはMarkdownとRスクリプトを合体させたようなものです。 ここではMarkdownについて説明しますが、読み飛ばしても構いません。 Markdownとは計量マークアップ言語と呼ばれているようにマークアップ言語の一種です。 マークアップ言語とは文章の中身と役割・外見を区別して記述する言語です。 逆に、世間で普及しているWordのように文章の中身と役割・外見が混在しているエディターはWYSIWYGと呼びます。 例えば、Wordではセクションの名前などは指定することができますが、見た目はフォントのサイズが大きくなったり、太字になったりします。 一方で、マークアップ言語の一種である.htmlファイルでは &lt;h1&gt;セクションタイトル&lt;/h1&gt; のように明示的にh1というタグをつけ、h1タグのついている文章に対して.cssファイルで見た目を決定します。 同様に、LaTeXでは\\section{セクションタイトル}のようにタグをつけます。 基本的にはWYSIWYGなソフトのほうが直観的な操作が可能で作業が楽ではあるものの、マークアップ言語はテキストで役割や外見も決めるので再現可能性が高いと言えるでしょう。 そこで、より簡便なマークアップ言語として登場したのがMarkdown記法です。 なので、HTML記法を使うこともできます。 5.2.2 セクション Markdownでは#を使ってセクションのタイトルを記述します。 #が多くなればなるほどより小さな見出しになります。 # レベル1 ## レベル2 ### レベル3 #### レベル4 5.2.3 パラグラフ 空行を入れると新しいパラグラフになります。 同じパラグラフです。 同じパラグラフです。 同じパラグラフです。 同じパラグラフです。 違うパラグラフです。 違うパラグラフです。 違うパラグラフです。 違うパラグラフです。 なので、パラグラフ内でも一文ごとに改行したほうが見やすいと思います。 5.2.4 箇条書き 番号なしの箇条書きの場合は=を、番号付きの箇条書きの場合は1.を入れます。 - 番号なし箇条書き - 番号なし箇条書き - 番号なし箇条書き 番号なし箇条書き 番号なし箇条書き 番号なし箇条書き 1. 番号付き箇条書き 1. 番号付き箇条書き 1. 番号付き箇条書き 番号付き箇条書き 番号付き箇条書き 番号付き箇条書き タブ（半角スペース4つ分）を入れると階層構造をつけることができます。 - レベル1 - レベル2 - レベル１ レベル1 レベル2 レベル１ 5.2.5 文字の強調 *もしくは_で囲むと斜体になり、**もしくは__で囲むと太字になります。 *斜体*と**太字** 斜体と太字 ｀で囲むとコードになり、~~で囲むと打ち消されます。 `code`と~~打ち消し~~ codeと打ち消し 日本語のLaTeXでは打ち消しに対応していないので、表示させていません。 5.2.6 引用 &gt;から始めると引用になります。 &gt; 引用文です。 引用文です。 5.2.7 リンク リンクを貼る場合は[リンク名](リンク先のURL)あるいは&lt;リンク先のURL&gt;とします。 - [RStudio](https://www.rstudio.com/) - &lt;https://www.rstudio.com/&gt; RStudio https://www.rstudio.com/ 5.2.8 画像、表 画像を埋め込む場合は![画像名](画像のパス)とします。 ![Rlogo](figures/Rlogo.png) Rlogo 表を埋め込む際には次のように書きます。 | 項目1 | 項目2 | 項目3 | |-------|-------|-------| | りんご| 100 | 赤 | | みかん| 80 | オレンジ | 項目1 項目2 項目3 りんご 100 赤 みかん 80 オレンジ 5.2.9 数式 LaTeX記法による数式を記述できます。 インラインの場合は$で囲み、ディスプレイの場合は$$で囲みます。 .htmlの場合、mathjaxによって数式を表示するのでオフラインでは表示できません。 確率変数$X_i$は平均$\\mu$、分散$\\sigma^2$の正規分布に従う。 確率変数\\(X_i\\)は平均\\(\\mu\\)、分散\\(\\sigma^2\\)の正規分布に従う。 $$ X_i \\sim \\mathcal{N}(\\mu,\\sigma^2) $$ \\[ X_i \\sim \\mathcal{N}(\\mu,\\sigma^2) \\] 5.3 Rチャンク R Markdown内でRコードを記述する際にはRチャンクと呼ばれるものの中で行います。 Rチャンクは次のような形をしています。 Ctrl + Alt + IでRチャンクを挿入することができます。 まず、この部分は後述するチャンクオプションを指定する場所になります。 ここではRコードであること、チャンク名をcarsと指定しています。 R MrkdownにおいてもRスクリプトと同様にCtrl + Enterでコードを実行することができます。 あるいはRチャンクの右上のボタンをクリックしても実行できます。 実行されたコードはチャンクの直下に表示されます。 右上から二番目のボタンはこのRチャンクの直前のRチャンクまでのコードを全て実行するボタンになります。 5.3.1 チャンクオプション チャンクオプションを指定することでコードとそのアウトプットをどのように出力するかを制御することができます。 主なものをまとめておきます。 eval=FALSEとするとコードは表示されるが実行されない。 echo=FALSEとするとコードは実行されるが表示されない。 include=FALSEとするとコードは実行されるがコードも実行結果も表示されない。 warning=FALSEやerror=FALSE、message=FALSEとすると警告やエラー、メッセージが表示されない。 例えば、{r, echo=FALSE}のように書きます。 デフォルトを変更したい場合は冒頭でknitr::opts_chunk$set(echo=TRUE)のように設定します。 5.4 yamlヘッダー yamlヘッダーとは.Rmdファイルの冒頭で---によって囲まれた箇所で、ページ全体の設定を行います。 初期状態では --- title: &quot;Untitled&quot; author: &quot;Shohei Doi&quot; date: &quot;4/9/2019&quot; output: html_document --- となっていますが、titleやauthor、dateでタイトル、著者、日付を設定できます。 5.4.1 output outputによって出力形式を決定します。 これによってyamlヘッダーにおいてどのような項目を設定できるのかも決まります。 どのような出力形式が利用可能であるかは後述するとして、以下ではhtml_documentにおける主なyamlヘッダーの設定を紹介します。 前田先生のページが参考になります。 5.4.2 目次 目次を出力するには次のように書きます。 output: html_document: toc: TRUE 目次の設定には次のようなものがあります。 output: html_document: toc: TRUE toc_depth: 2 toc_gloat: TRUE number_sections: TRUE toc_depthによってどの階層の見出しまで表示するかを決めます。 toc_floatをTRUEにすると目次がスクロールしてもついてきます。 number_sectionsをTRUEにすると見出しに通し番号がつきます。 5.4.3 テーマ テーマを決める場合はthemeで指定します。 テーマ一覧はこちらになります。 output: html_document: theme: &quot;paper&quot; 5.4.4 htmlとcss cssによってカスタム.cssファイルを指定できます。 includeによって.htmlファイルの挿入ができます。 デフォルトでは.cssファイルは画像データなどは全て.htmlファイルに含まれてスタンドアロンな形で見ることができます。 しかし、self_containedをFALSEとすると付属ファイルは別フォルダに作成され、.htmlファイル自体が見やすくなります。 5.5 その他のテンプレート outputを変更することで、いくつかのテンプレートを使用することができます。 ここでは.htmlファイルが出力されるいくつかのテンプレートを紹介しておきます。 公式サイトのGalleryやFormatsをご覧ください。 5.5.1 Distill Distillはウェブで公開することを念頭に置いた専門的な記事を書くためのテンプレートになっています。 インストールは以下のように行います。 devtools::install_github(&quot;rstudio/distill&quot;) RStudioのバージョンは1.2以上であることが求められています。 インストールに成功するとR Markdown...の中のFrom TemplateにDistill Articleが追加されているはずです。 5.5.2 Tufte Handout Tufte Handoutというテンプレートもあります。 Tufte Handout tufteというパッケージをインストールするとテンプレートに追加されます。 5.5.3 rmdformats rmdformatsというテンプレートもあります。 同様に、rmdformatsというパッケージをインストールします。 material readthedown html_clean html_docco 5.5.4 スライド R Markdownから作成できる.htmlファイルのスライドにはioslidesとslidyというものがあります。 ioslides ioslides slidy slidy これらはデフォルトで入っています。 また、reveal.jsという.htmlスライドを作ることもできます。 revealjsというパッケージをインストールするとテンプレートが追加されます。 Presentationの方ではない点に注意。 reveal.js reveal.js 同様にしてxaringanというNARUTOという忍者マンガにインスパイアされたテンプレートを使用することもできます。 xaringan xaringan 5.5.5 ダッシュボード flexdashboardというパッケージを使うとダッシュボードを作ることができます。 パッケージをインストールするとFlex Dashboardというテンプレートが追加されます。 flexdashboard 5.5.6 Microsoft Office R MarkdownからMicrosoft OfficeのWordやPowerPointの形式のファイルを作成することも可能です。 "],
["encoding-r.html", "第6章 Rにおける文字コード* 6.1 なぜ文字化けが起こるのか 6.2 Rスクリプトの文字化け 6.3 データの文字化け 6.4 その他の問題", " 第6章 Rにおける文字コード* Rに限らず文字化けはPCにおいてしばしば起こる問題です。 平たく言ってしまうと、PCでは文字にコードが付与されており、機械がコードを読み取って文字を表示します。 そのコードと文字の対応関係をエンコーディングと呼び、異なるエンコーディングでデータを読み込むと文字化けが起こります。 6.1 なぜ文字化けが起こるのか 6.1.1 エンコーディング 実用上、日本語で文字化けが起こる問題の大半は WindowsではShift-JISあるいはCP932で、 LinuxやMacなどのUNIX系ではUTF-8で エンコーディングしていることに起因しています。 UTF-8のUはunicodeであることからも分かるように、世界で共通の規格として作られているエンコーディング方式になります。 なので、RおよびRStudioでは日本語独自のShift-JISではなくUTF-8を使うようにしたほうがよいでしょう。 6.1.2 RとRStudioにおける問題 RとRStudioで文字化けが起こる問題は大きく2つに分けられます。 RStudioで日本語を含むRスクリプトを開いたとき Rで日本語を含むデータを読み込んだとき 以下では、それぞれの問題の対処法を紹介します。 6.2 Rスクリプトの文字化け Rスクリプトが文字化けしている場合はRStudiで対処します。 例としてUTF-8でエンコードしたRスクリプトとShift-JISでエンコードしたRスクリプトをRStudioで開いてみてください。 （設定を変更していなければ）Windowsの場合は前者が、Linux/Macの人は後者が文字化けしているはずです。 6.2.1 ファイルを開く まず、デフォルトをUTF-8に変更しましょう。 メニューの中のFileにReopen with Encoding...というのがあるので、UTF-8を選択します。 さらにSet as default encoding for source filesにチェックを入れることで今後はUTF-8で表示されます。 UTF-8でエンコードされた方は正常に表示され、Shift-JISでエンコードされた方は文字化けしていることを確認してください。 今後、RStudioで文字化けが起こる場合はデフォルトがUTF-8になっているので、Rスクリプトが他のエンコードのために起こっていることになります。 そのような場合にはReopen with Encoding...で適当なエンコーディングを選択します。 例えば、Shift-JISを選択すると正しく表示されるはずです。 6.2.2 ファイルを保存する 自分で作成したRスクリプトを保存する際にはメニューのFileの中のSave with Encoding...でUTF-8を選択してください。 ここでもUTF-8がデフォルトになるようにチェックを入れておきましょう。 6.3 データの文字化け データが文字化けしているときはRで対処します。 UTF-8でエンコーディングしたデータとShift-JISでエンコーディングしたデータをそれぞれ読み込んでみてください。 やはりWindowsでは前者が、Linux/Macでは後者が文字化けをしているはずです。 read.csv(&quot;data/data_utf8.csv&quot;) ## member ## 1 イヌ ## 2 サル ## 3 キジ read.csv(&quot;data/data_sjis.csv&quot;) ## Error in type.convert.default(data[[i]], as.is = as.is[i], dec = dec, : invalid multibyte string at &#39;&lt;83&gt;C&lt;83&gt;k&#39; 僕はLinuxを使っているので後者が文字化けを起こしてエラーが出ています。 6.3.1 標準関数の場合 標準関数の場合、fileEncodingというオプションでエンコーディングを指定します。 read.csv(&quot;data/data_utf8.csv&quot;, fileEncoding = &quot;utf8&quot;) ## member ## 1 イヌ ## 2 サル ## 3 キジ read.csv(&quot;data/data_sjis.csv&quot;, fileEncoding = &quot;shift-jis&quot;) ## member ## 1 イヌ ## 2 サル ## 3 キジ 6.3.2 tidyverseの場合 tidyverseのreadrの場合はlocaleで指定します。 readrはtidyverseに含まれているので、tidyverseを読み込んだ場合は、別途読み込む必要はありません。 library(tidyverse) read_csv(&quot;data/data_utf8.csv&quot;, locale = locale(encoding = &quot;utf8&quot;)) ## Parsed with column specification: ## cols( ## member = col_character() ## ) ## # A tibble: 3 x 1 ## member ## &lt;chr&gt; ## 1 イヌ ## 2 サル ## 3 キジ read_csv(&quot;data/data_sjis.csv&quot;, locale = locale(encoding = &quot;shift-jis&quot;)) ## Parsed with column specification: ## cols( ## member = col_character() ## ) ## # A tibble: 3 x 1 ## member ## &lt;chr&gt; ## 1 イヌ ## 2 サル ## 3 キジ 6.3.3 エンコーディングを確認する方法 readrのguess_encoding()という関数を使うと、どのようなエンコーディングがされているかを推測します。 guess_encoding(&quot;data/data_utf8.csv&quot;) ## # A tibble: 1 x 2 ## encoding confidence ## &lt;chr&gt; &lt;dbl&gt; ## 1 UTF-8 1 guess_encoding(&quot;data/data_sjis.csv&quot;) ## # A tibble: 1 x 2 ## encoding confidence ## &lt;chr&gt; &lt;dbl&gt; ## 1 windows-1252 0.35 windows-1215というのはCP1215とも呼ばれるエンコーディングで、Shift-JISの親戚のようなものです（きっと）。 6.3.4 もとのデータを見たい場合 しばしばRではなく直接データを見たいときがあります。 そのような場合は、LibreOfficeのCalcというソフトで開くとエンコーディングを指定することができます。 6.3.5 データを保存する場合 データを書き出す場合、UTF-8で行うのが望ましいですが、そうするとWindowsからExcelなどで開いた場合に文字化けしてしまいます。 それを回避するために、readrのwrite_excel_csv()を使うとエクセルで開いても文字化けしません。 6.4 その他の問題 6.4.1 アカウント名が日本語の場合 Windowsでアカウント名が日本語の場合、パスを通すときにエラーが出てくる場合があります。 そのような場合は、 新しいアカウントを作成する。 新しいアカウントを作成し、現在のアカウントの内容を全てコピーして、現在のアカウントを削除する。 OSをクリーンインストールする。 Linux（Ubuntuなど）を使う。 仮想マシン（VMwareやVirtualBox）を使う。 デュアルブートをする。 といった選択肢が考えられます（下に行くほど難易度が高い）。 6.4.2 画像で日本語が文字化けする場合 Macで画像を出力する際に日本語が文字化けすることがあります。 plot()の場合は、 par(family = &quot;HiraKakuProN-W3&quot;) ggplot2の場合は、 theme(base_family = &quot;HiraKakuProN-W3&quot;) とするらしいです（Macは使ったことがないので分かりません）。 quantedaでプロットする際、うまくフォントが指定できない場合があるので、こちらを参考に、extrafont::fonts()でフォント一覧を確認して、適当なものを指定して下さい。 "],
["environment.html", "動作環境", " 動作環境 sessionInfo() ## R version 3.6.3 (2020-02-29) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 18.04.4 LTS ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.7.1 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.7.1 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=en_US.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] forcats_0.5.0 stringr_1.4.0 dplyr_0.8.5 purrr_0.3.4 ## [5] readr_1.3.1 tidyr_1.0.2 tibble_3.0.0 ggplot2_3.3.0 ## [9] tidyverse_1.3.0 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.0.0 xfun_0.13 haven_2.2.0 lattice_0.20-41 ## [5] colorspace_1.4-1 vctrs_0.2.4 generics_0.0.2 htmltools_0.4.0 ## [9] yaml_2.2.1 utf8_1.1.4 rlang_0.4.5 pillar_1.4.3 ## [13] withr_2.1.2 glue_1.4.0 DBI_1.1.0 dbplyr_1.4.3 ## [17] modelr_0.1.6 readxl_1.3.1 lifecycle_0.2.0 munsell_0.5.0 ## [21] gtable_0.3.0 cellranger_1.1.0 rvest_0.3.5 evaluate_0.14 ## [25] knitr_1.28 fansi_0.4.1 highr_0.8 broom_0.5.5 ## [29] Rcpp_1.0.4.6 backports_1.1.6 scales_1.1.0 jsonlite_1.6.1 ## [33] fs_1.4.1 hms_0.5.3 digest_0.6.25 stringi_1.4.6 ## [37] bookdown_0.18 grid_3.6.3 cli_2.0.2 tools_3.6.3 ## [41] magrittr_1.5 crayon_1.3.4 pkgconfig_2.0.3 ellipsis_0.3.0 ## [45] xml2_1.3.1 reprex_0.3.0 lubridate_1.7.8 assertthat_0.2.1 ## [49] rmarkdown_2.1 httr_1.4.1 rstudioapi_0.11 R6_2.4.1 ## [53] nlme_3.1-144 compiler_3.6.3 "],
["references.html", "参考文献", " 参考文献 "]
]
