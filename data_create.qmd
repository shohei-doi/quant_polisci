---
aliases: 
  - create-vars.html
  - data-combine.html
---

# データの追加

前回は変数を選択したり、観察を選択したりと、データから一部を取り出す作業を学びました。今回は逆にデータを増やす作業を学びます。

```{r filename="R"}
library(tidyverse)
library(readxl)
```

```{python filename="Python"}
import pandas as pd
import polars as pl
```

## 変数の作成

データフレームを拡張する方法の一つは変数を増やすことです。変数を増やすためには、

1. 既存のデータフレームの変数を用いて新しい変数を作成するか、
1. 別のデータフレームと結合する

の2通りの方法があります。まずは、前者について学びます。

![変数の作成](figures/df_add_variable.drawio.png)

### 四則演算

一般的な四則演算が実行可能です。例えば、東大朝日の2017年衆議院選挙の有権者調査のコードブックを見てみると、問23で政策に対する賛否を聞いています（質問文は間違っていますが）。特に、(1)から(4)は外交政策についてタカ派かハト派かを表しています。

そこで、これらの変数を足し合わせることでハト派度合いを表す変数を作りたいと思います。

- ただし、(4)については点数が高いほうがタカ派を意味するので、引き算します。
- ついでに不要な変数も除去しておきます。

```{r filename="R (base)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99")

df_voter2017 <- df_voter2017[,c("Q23_1", "Q23_2", "Q23_3", "Q23_4")]
df_voter2017$dovish <- df_voter2017$Q23_1 + df_voter2017$Q23_2 + df_voter2017$Q23_3 - df_voter2017$Q23_4

head(df_voter2017)
```

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99") |> 
    select(Q23_1, Q23_2, Q23_3, Q23_4) |> 
    mutate(dovish = Q23_1 + Q23_2 + Q23_3 - Q23_4)

head(df_voter2017)
```

```{python filename="Python (pandas)"}
df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")

df_voter2017 = df_voter2017.loc[:,["Q23_1", "Q23_2", "Q23_3", "Q23_4"]]
df_voter2017["dovish"] = df_voter2017["Q23_1"] + df_voter2017["Q23_2"] + df_voter2017["Q23_3"] - df_voter2017["Q23_4"]

df_voter2017.head()
```

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .select(["Q23_1", "Q23_2", "Q23_3", "Q23_4"])
    .with_columns(dovish = pl.col("Q23_1") + pl.col("Q23_2") + pl.col("Q23_3") - pl.col("Q23_4"))
)

df_voter2017.head()
```

ここでも`tidyverse`と`polars`、R標準関数と`pandas`の共通性が見て取れます。つまり、前者では[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)ないし[`with_columns()`](https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.with_columns.html)内で新しい変数を定義しています。一方で後者は存在しない変数を参照して、そこに代入することで新しい変数を作成しています。

なお、`+`や`-`以外にも四則演算は可能です。

|計算|R|Python|
|:---:|:---:|:---:|
|足し算|`+`|`+`|
|引き算|`-`|`-`|
|掛け算|`*`|`*`|
|割り算|`/`|`/`|
|累乗|`^`|`**`|
|割り算の余り|`%%`|`%`|
|割り算の商|`%/%`|`//`|

### 尺度の反転

ところで、先程の4つの設問では賛成が1、反対が5となる変数でした。そして、(1)から(3)は賛成のほうがタカ派であり、(4)は反対の方がタカ派と言えそうでした。

そうすると、(4)でも反対が1、賛成が5となるように尺度を反転させたくなるのが人情です。このような場合、「最大値から元の変数を引いて最小値を足す」ことで反転させることができます。そのような反転させた(4)の回答を`Q23_4new`として作ってみます。

```{r filename="R (base)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99")

df_voter2017 <- df_voter2017[,c("Q23_1", "Q23_2", "Q23_3", "Q23_4")]
df_voter2017$Q23_4new <- max(df_voter2017$Q23_4) - df_voter2017$Q23_4 + min(df_voter2017$Q23_4)
df_voter2017$dovish <- df_voter2017$Q23_1 + df_voter2017$Q23_2 + df_voter2017$Q23_3 + df_voter2017$Q23_4new

head(df_voter2017)
```

`Q23_4new`が全て`NA`となっています。なぜなら、`Q23_4`に欠損値が含まれており、この場合は最大値も最小値も欠損値になってしまうからです。したがって、`na.rm = TRUE`とすることで欠損値を除外して最大値と最小値を求めます。

```{r filename="R (base)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99")

df_voter2017 <- df_voter2017[,c("Q23_1", "Q23_2", "Q23_3", "Q23_4")]
df_voter2017$Q23_4new <- max(df_voter2017$Q23_4, na.rm = TRUE) - df_voter2017$Q23_4 + min(df_voter2017$Q23_4, na.rm = TRUE)
df_voter2017$dovish <- df_voter2017$Q23_1 + df_voter2017$Q23_2 + df_voter2017$Q23_3 + df_voter2017$Q23_4new

head(df_voter2017)
```

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99") |> 
    select(Q23_1, Q23_2, Q23_3, Q23_4) |> 
    mutate(Q23_4new = max(Q23_4, na.rm = TRUE) - Q23_4 + min(Q23_4, na.rm = TRUE), 
           dovish = Q23_1 + Q23_2 + Q23_3 + Q23_4new)

head(df_voter2017)
```

```{python filename="Python (pandas)"}
df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")

df_voter2017 = df_voter2017.loc[:,["Q23_1", "Q23_2", "Q23_3", "Q23_4"]]
df_voter2017["Q23_4new"] = df_voter2017["Q23_4"].max() - df_voter2017["Q23_4"] + df_voter2017["Q23_4"].min()
df_voter2017["dovish"] = df_voter2017["Q23_1"] + df_voter2017["Q23_2"] + df_voter2017["Q23_3"] + df_voter2017["Q23_4new"]

df_voter2017.head()
```

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .select(["Q23_1", "Q23_2", "Q23_3", "Q23_4"])
    .with_columns(Q23_4new = pl.col("Q23_4").max() - pl.col("Q23_4") + pl.col("Q23_4").min())
    .with_columns(dovish = pl.col("Q23_1") + pl.col("Q23_2") + pl.col("Q23_3") + pl.col("Q23_4new"))
)

df_voter2017.head()
```

### 条件に基づく変数

#### 条件が一つの場合

四則演算以外にも条件に基づいて新しい変数を作成することもできます。例えば、先ほど作ったハト派変数について、「平均値よりも大きければハト派、そうでなければタカ派」とする変数を作ってみます。

```{r filename="R (base)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99")

df_voter2017 <- df_voter2017[,c("Q23_1", "Q23_2", "Q23_3", "Q23_4")]
df_voter2017$Q23_4new <- max(df_voter2017$Q23_4, na.rm = TRUE) - df_voter2017$Q23_4 + min(df_voter2017$Q23_4, na.rm = TRUE)
df_voter2017$dovish <- df_voter2017$Q23_1 + df_voter2017$Q23_2 + df_voter2017$Q23_3 + df_voter2017$Q23_4new
df_voter2017$dov_bin <- ifelse(df_voter2017$dovish > mean(df_voter2017$dovish, na.rm = TRUE), "dove", "hawk")

head(df_voter2017)
```

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99") |> 
    select(Q23_1, Q23_2, Q23_3, Q23_4) |> 
    mutate(Q23_4new = max(Q23_4, na.rm = TRUE) - Q23_4 + min(Q23_4, na.rm = TRUE), 
           dovish = Q23_1 + Q23_2 + Q23_3 + Q23_4new, 
           dov_bin = if_else(dovish > mean(dovish, na.rm = TRUE), "dove", "hawk"))

head(df_voter2017)
```

```{python filename="Python (pandas)"}
import numpy as np

df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")

df_voter2017 = df_voter2017.loc[:,["Q23_1", "Q23_2", "Q23_3", "Q23_4"]]
df_voter2017["Q23_4new"] = df_voter2017["Q23_4"].max() - df_voter2017["Q23_4"] + df_voter2017["Q23_4"].min()
df_voter2017["dovish"] = df_voter2017["Q23_1"] + df_voter2017["Q23_2"] + df_voter2017["Q23_3"] + df_voter2017["Q23_4new"]
df_voter2017["dov_bin"] = np.where(df_voter2017["dovish"] > df_voter2017["dovish"].mean(), "dove", "hawk")

df_voter2017.head()
```

- `numpy`というパッケージを使います。

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .select(["Q23_1", "Q23_2", "Q23_3", "Q23_4"])
    .with_columns(Q23_4new = pl.col("Q23_4").max() - pl.col("Q23_4") + pl.col("Q23_4").min())
    .with_columns(dovish = pl.col("Q23_1") + pl.col("Q23_2") + pl.col("Q23_3") + pl.col("Q23_4new"))
    .with_columns(dov_bin = pl.when(pl.col("dovish") > pl.col("dovish").mean()).then(pl.lit("dove")).otherwise(pl.lit("hawk")))
)

df_voter2017.head()
```

- 変数に文字列を代入するためには`pl.lit()`を使います。

長くて分かりにくいですが、基本的な構造はいずれも同じです。Rの標準関数の場合は`ifelse()`、`tidyverse`の場合は[`if_else()`](https://dplyr.tidyverse.org/reference/if_else.html)、`pandas`では`numpy`の[`np.where()`](https://numpy.org/doc/stable/reference/generated/numpy.where.html)、`polars`では[`when().then().otherwise()`](https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.when.html)を使います。

まず最初に条件式を入力し（ハト派度合いが平均値以上）、それに合致する場合は最初の値`dove`を代入し、合致しない場合は次の値`hawk`を代入しています。

#### 条件が複数の場合

条件が複数ある場合、つまり条件1に当てはまる場合はA、条件2に当てはまる場合はB、条件3に当てはまる場合はC……というような変数を作る場合は、次のように書くのが便利です。例えば、`F2`という変数は年代を表していますが、10代・20代を若者、30代から50代を中高年、60代以上を高齢者とするような変数を作ってみます。

`tidyverse`では[`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html)を使います。`条件式 ~ 変数の値`とします。条件に合致しないものに対しては条件式を`TRUE`とします。

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99") |> 
    select(F2) |> 
    mutate(generation = case_when(F2 <= 2 ~ "youth", 
                                  3 <= F2 & F2 <= 5 ~ "middle", 
                                  TRUE ~ "senior"))

head(df_voter2017)
```

`polars`では`when().then()`を繰り返し、最後に`otherwise()`で条件に合致しないものの値を決めます。

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .select(["F2"])
    .with_columns(generation = pl.when(pl.col("F2") <= 2)
                               .then(pl.lit("youth"))
                               .when((3 <= pl.col("F2")) & (pl.col("F2") <= 5))
                               .then(pl.lit("middle"))
                               .otherwise(pl.lit("senior")))
)

df_voter2017.head()
```

<!-- ### ラグ変数

### 日付 -->

## データの結合（変数の追加）

これまでは、既存のデータフレームの情報を使って新しい変数を作成してきました。次は、複数のデータセットを結合したいと思います。

![データの結合（変数の追加）](figures/df_join.drawio.png)

前回使った民主主義度のデータに国連総会の投票行動から推計された[国家の理想点](https://dataverse.harvard.edu/dataset.xhtml?persistentId=hdl:1902.1/12379)（政策位置）のデータを結合しようと思います。

- `IdealpointestimatesAll_Sep2023.csv`の右のダウンロードボタンを押して、"Comma Spearated Values"を選択して、csvファイルをダウンロードします。

```{r filename="R (tidyverse)"}
library(readxl)

df_polity <- read_excel("data/p5v2018.xls")

df_ideal <- read_csv("data/IdealpointestimatesAll_Sep2023.csv")
```

```{python filename="Python (pandas)"}
df_polity = pd.read_excel("data/p5v2018.xls")

df_ideal = pd.read_csv("data/IdealpointestimatesAll_Sep2023.csv")
```

```{python filename="Python (polars)"}
df_polity = pl.read_excel("data/p5v2018.xls")

df_ideal = pl.read_csv("data/IdealpointestimatesAll_Sep2023.csv")
```

それぞれのデータの見てみます（ここではRのみ）。

```{r filename="R (tidyverse)"}
head(df_polity)

head(df_ideal)
```

データを結合する際には、どの変数を目印にして結合するかを決めなくてはいけません。今回の場合、ある年のある国で民主主義度と理想点を結合させたいので、「年」と「国」を表す変数を探します。

民主主義度のデータでは一目瞭然ですが、理想点のデータではよく分かりません。まず、`session`とは国連の会期を意味しています。国連の会期は9月から始まるので、厳密には何年であるか決められないのですが、ここでは目をつぶって、第1会期が1946年ということにしたいと思います。つまり、`session`に1945を足して、年を表す変数を作成します。

```{r filename="R (tidyverse)"}
df_ideal <- read_csv("data/IdealpointestimatesAll_Sep2023.csv") %>% 
    mutate(year = session + 1945)
```

```{python filename="Python (pandas)"}
df_ideal = pd.read_csv("data/IdealpointestimatesAll_Sep2023.csv")

df_ideal["year"] = df_ideal["session"] + 1945
```

```{python filename="Python (polars)"}
df_ideal = (
    pl.read_csv("data/IdealpointestimatesAll_Sep2023.csv")
    .with_columns(year = pl.col("session") + 1945)
)
```

次に国を表すコードですが、両方のデータに共通して出てくる`ccode`に着目します。これは、実は[Correlates of War](https://correlatesofwar.org/)という国際関係のデータを整備するプロジェクトで各国に割り振られている番号になります。したがって、これを国名だと思って結合すればいいのです。

以上をまとめて、データを横方向に結合します。ついでに、必要な変数だけを選択しておきます。

```{r filename="R (tidyverse)"}
library(readxl)

df_polity <- read_excel("data/p5v2018.xls")

df_ideal <- read_csv("data/IdealpointestimatesAll_Sep2023.csv") %>% 
    mutate(year = session + 1945)

df_polity_ideal <- left_join(df_ideal, df_polity, by = c("year", "ccode")) %>% 
    select(year, country, polity, IdealPointAll)

head(df_polity_ideal)
```

```{python filename="Python (pandas)"}
df_polity = pd.read_excel("data/p5v2018.xls")

df_ideal = pd.read_csv("data/IdealpointestimatesAll_Sep2023.csv")

df_ideal["year"] = df_ideal["session"] + 1945

df_polity_ideal = pd.merge(df_ideal, df_polity, on=["year", "ccode"], how="left")
df_polity_ideal = df_polity_ideal.loc[:, ["year", "country", "polity", "IdealPointAll"]]

df_polity_ideal.head()
```

```{python filename="Python (polars)"}
df_polity = pl.read_excel("data/p5v2018.xls")

df_ideal = (
    pl.read_csv("data/IdealpointestimatesAll_Sep2023.csv")
    .with_columns(year = pl.col("session") + 1945)
)

df_polity_ideal = (
    df_ideal.join(df_polity, on=["year", "ccode"], how="left")
    .select(["year", "country", "polity", "IdealPointAll"])
)

df_polity_ideal.head()
```

欲しかったデータが出来上がっていることが分かります。

### 結合の方法

ここでは、全て左結合で結合しました。左結合とは左側のデータフレーム（すなわち`df_ideal`）と一致する右側のデータフレームを結合するということです。

同様に右結合もありますし、全結合や共通結合もあります。それぞれ`right`, `full`, `inner`です。

### countrycode

今回は、両方のデータにCorrelates of Warのコードが含まれていましたが、多くの場合、そのようなことはありません。そして国名やISOコードなどバラバラの名称で国が示されていることがほとんどです。

この場合、`countrycode`というパッケージを使って、国名を統一することができます。試しに、理想点のデータからISOコードを作ります。

- なお、完璧ではないので、ミスがないかチェックする必要はあります。

```{r filename="R (tidyverse)"}
library(countrycode)

df_ideal <- read_csv("data/IdealpointestimatesAll_Sep2023.csv") %>% 
    mutate(year = session + 1945, 
           scode = countrycode(ccode, "cown", "iso3c")) %>% 
    select(year, ccode, scode)

head(df_ideal)
```

- Pythonにも同名のパッケージはありますが、なんかうまくいかないです。

## データの結合（観察の追加）

最後に、データフレームを縦に結合、すなわち観察を増やしたいと思います。例えば、東大朝日調査の2017年の衆院選と2021年の衆院選の有権者調査を結合して、両方を含むデータフレームを作成します。

![データの結合（観察の追加）](figures/df_bind.drawio.png)

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99")

df_voter2021 <- read_csv("data/2022UTASV20220730.csv", na = "99")
```

```{python filename="Python (pandas)"}
df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")

df_voter2021 = pd.read_csv("data/2022UTASV20220730.csv", na_values="99")
```

```{python filename="Python (polars)"}
df_voter2017 = pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")

df_voter2021 = pl.read_csv("data/2022UTASV20220730.csv", null_values="99")
```

### データの目印

データを結合する際に、どれが何年のデータであるのか区別する必要があるため、年を表す変数を作成します。

```{r filename="R (tidyverse)"}
df_voter2017 <- read_csv("data/2017UTASV20200326.csv", locale = locale(encoding = "Shift-JIS"), na = "99") %>% 
    mutate(year = 2017)

df_voter2021 <- read_csv("data/2022UTASV20220730.csv", na = "99") %>% 
    mutate(year = 2021)
```

```{python filename="Python (pandas)"}
df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")
df_voter2017["year"] = 2017

df_voter2021 = pd.read_csv("data/2022UTASV20220730.csv", na_values="99")
df_voter2021["year"] = 2021
```

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .with_columns(year = 2017)
)

df_voter2021 = (
    pl.read_csv("data/2022UTASV20220730.csv", null_values="99")
    .with_columns(year = 2021)
)
```

### データの結合

縦に結合する場合は変数名が同じである必要があります。

- 実際に同じ質問への回答が同じ変数名となっているかは、コードブックを参照してください。
- わかりやすさのために、`ID`と`year`だけを取り出します。

```{r filename="R (tidyverse)"}
df_voter2017_21 <- bind_rows(df_voter2017, df_voter2021) %>% 
    select(ID, year)

head(df_voter2017_21)
tail(df_voter2017_21)
```

```{python filename="Python (pandas)"}
df_voter2017 = pd.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", na_values="99")
df_voter2017["year"] = 2017

df_voter2021 = pd.read_csv("data/2022UTASV20220730.csv", na_values="99")
df_voter2021["year"] = 2021

df_voter2017_21 = pd.concat([df_voter2017, df_voter2021])
df_voter2017_21 = df_voter2017_21.loc[:, ["ID", "year"]]

df_voter2017_21.head()
df_voter2017_21.tail()
```

```{python filename="Python (polars)"}
df_voter2017 = (
    pl.read_csv("data/2017UTASV20200326.csv", encoding="Shift-JIS", null_values="99")
    .with_columns(year = 2017)
)

df_voter2021 = (
    pl.read_csv("data/2022UTASV20220730.csv", null_values="99")
    .with_columns(year = 2021)
)

df_voter2017_21 = pl.concat([df_voter2017, df_voter2021], how="diagonal")
df_voter2017_21 = df_voter2017_21.select(["ID", "year"])

df_voter2017_21.head()
df_voter2017_21.tail()
```